/**
 * This class is generated by jOOQ
 */
package com.torres999.sprintboot.shiro.dao.jooq.tables.records;


import com.torres999.sprintboot.shiro.dao.jooq.tables.TestIdx;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * test table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestIdxRecord extends TableRecordImpl<TestIdxRecord> implements Record3<Short, String, String> {

    private static final long serialVersionUID = 87713453;

    /**
     * Setter for <code>shiro.test_idx.type</code>. 类型
     */
    public void setType(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>shiro.test_idx.type</code>. 类型
     */
    public Short getType() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>shiro.test_idx.object</code>. key
     */
    public void setObject(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>shiro.test_idx.object</code>. key
     */
    public String getObject() {
        return (String) get(1);
    }

    /**
     * Setter for <code>shiro.test_idx.value</code>. value
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>shiro.test_idx.value</code>. value
     */
    public String getValue() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Short, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Short, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field1() {
        return TestIdx.TEST_IDX.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TestIdx.TEST_IDX.OBJECT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return TestIdx.TEST_IDX.VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value1() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getObject();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestIdxRecord value1(Short value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestIdxRecord value2(String value) {
        setObject(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestIdxRecord value3(String value) {
        setValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TestIdxRecord values(Short value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestIdxRecord
     */
    public TestIdxRecord() {
        super(TestIdx.TEST_IDX);
    }

    /**
     * Create a detached, initialised TestIdxRecord
     */
    public TestIdxRecord(Short type, String object, String value) {
        super(TestIdx.TEST_IDX);

        set(0, type);
        set(1, object);
        set(2, value);
    }
}
